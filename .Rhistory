lapply(split(iris,iris$Species),function (iris) colMeans(iris[,c("Sepal.Length","Sepal.Width")]) )
lapply(split(iris,iris$Species),function (iris) colMeans(iris[,c("Sepal.Width")]) )
lapply(split(iris,iris$Species),function (iris) colMeans(iris[,c("Sepal.Length","Sepal.Width")]) )
colMeans(iris)
apply(iris[,1:4],2, mean)
library(datasets)
data(mtcars)
data(mtcars)
library(datasets)
data(mtcars)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
View(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
debug(ls)
ls
debug(ls)
ls()
swirl()
library(swirl)
{
q
uit
swirl()
library(swirl)
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names, sorted))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
swirl()
library(swirl)
C
rm(list=ls())
undebug(ls)
undebug(ls)
rm(list=ls())
library(swirl)
swirl()
swirl()
1:20
pi:10
12:1
15:1
?`:`
seq(1,20)
seq(0,10,by=.5)
sec(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
play
play()
nxt()
?along.with()
seq_along(my_seq)
?seq_along()
nxt()
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<-c(.5,55,-10,6)
tf<-num_vect<1
tf
num_vect<=6
num_vect>=6
c("My","name","is")
my_char<-c("My","name","is")
my_char
paste(my_char, collapse=" ")
c(my_char, "Ballard")
my_name<-c(my_char, "Ballard")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
swirl()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set.seed(1)
rpois(5, 2)
install.packages("swirl")
library(swirl)
swirl()
x<-c(44,NA,5,NA)
x<*3
x*3
y<-rnorm(1000)
a<-rep(NA,1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
print(my_na)
my_na
my_data==is.na()
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[300]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect["foo",bar"]
vect["foo","bar"]
vect["foo","bar"]
vect[c("foo","bar")]
my_vector(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-("Bill","Gina","Kelly","Sean")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(data.frame)
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data,cnames)
my_data<-colnames(cnames)
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 >
| 8 || 6 != 8 && 4 > 3.9
5 > | 8 || 6 != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean((c4,5,10))
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4, div = 2)
args(remainder)
submit
swirl()
submit()
submit()
evaluat(sdev,c(1.4,3.6,7.9,8.8))
evaluate(sdev,c(1.4,3.6,7.9,8.8))
evaluate(stdev,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x)dat[1],c(8,4,0))
evaluate(function(x){dat[x},c(8,4,0))
evaluate(function(x){x[1},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
telegram(x+2)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
mad_libs(place="house",adjective="red", noun="cat")
install.packages("RMySQL")
install.packages("Rtools")
R.Version()
updateR()
R.home()
install.packages('RMySQL',type='source')
packageVersion("Rtools")
ucscDb<-dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
library(RMySQL)
ucscDb<-dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
result
result
hg19<0dbConnect(MySQL(),user="genome",db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
length(allTables)
hg19<dbConnect(MySQL(),user="genome",db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
length(allTables)
hg19<dbConnect(MySQL(),user="genome",db="hg19",
host="genome-mysql.cse.ucsc.edu")
hg19<-(MySQL(),user="genome",db="hg19",
host="genome-mysql.cse.ucsc.edu")
hg19<-dbConnect(MySQL(),user="genome",db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
length(allTables)
allTables[1:5]
dbDisconnect(ucscDb);
dbDisconnect(ucscDb)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages(reshape2)
install.packages("reshape2")
install.packages("dplyr")
install.packages("magrittr")
install.packages("sparklyr")
library(sparklyr)
spark_install(version="1.6.2")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
library(ggplot2)
data(airquality)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
data(movies)
data("movies")
swirl()
library(swirl)
Ballard
swirl()
install_course("Exploratory_Data_Analysis")
swirl()
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
g<-ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(lm)
g+geom_point()+geom_smooth(aes(lm))
g+geom_point()+geom_smooth(aes("lm"))
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(aes(color=drv),size=4,alpha=1/2)
g+geom_point(aes(color=drv),labs(title"Swirl Rules!",labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv),labs(title="Swirl Rules!",labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv),labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv),labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=-drv),size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(,myx,myy,type="l",ylim=c(-3,3))
plot(,myx,myy,type="l",ylim=c(-3,3))
plot(,myx,myy,type="l",ylim=c(-3,3))
plot(,myx,myy,type="l",ylim=c(-3,3))
plot(,myx,myy,type="l",ylim=c(-3,3))
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx,myy,type="l",ylim=c(-3,3))
g<-ggplot(testdat,aes(x=myx,y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim(-3,3))
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point(drv~cyl,margins=TRUE)
g+geom_point(aes(drv~cyl),margins=TRUE)
g+geom_point(drv~cyl,aes(margins=TRUE))
g+geom_point()+facet_grid(aes(drv~cyl),margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
swirl()
install.packages("plotly")
install.packages("shiny")
install.packages("combinat")
install.packages("mcsm")
install.packages("mnormt")
install.packages("rtrun")
install.packages("bayesm")
install.packages("mc2d")
install.packages("randtoolbox")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
activity<-read.csv("activity.csv")
Certification/repres/RepData_PeerAssessment1")
activity<-read.csv("activity.csv")
activity <- read.csv(file=activity)
activity <- read.csv(file="activity.csv")
ls()
setwd("C:/Users/rballard/Desktop/Personal/Data Science Certification/repres/RepData_PeerAssessment1")
activity <- read.csv(file="activity.csv")
names(activity)
class(activity$steps)
class(activity$date)
class(activity$interval)
activity$interval
names(activity)
activity$date
activity$date<-as.Date(activity$date,format="%Y-%m-%d")
activity$interval<-as.factor(activity$interval)
dailysteps<-aggregate(activity,by=list(date),FUN-mean,na.rm=TRUE)
dailysteps<-aggregate(activity,by=list(date),FUN=mean,na.rm=TRUE)
dailysteps<-aggregate(steps~date,data=activity,FUN=mean,na.rm=TRUE)
dailysteps
dailysteps<-aggregate(steps~date,data=activity,FUN=sum,na.rm=TRUE)
dailysteps
dailysteps$steps/nrow(dailysteps)
mean(dailysteps$steps)
hist(dailysteps)
dailysteps
hist(dailysteps$steps)
dailystepmedian<-median(dailysteps$steps
)
library(ggplot2)
avgintsteps<-aggregate(steps~interval,activity,FUN=mean,na.rm=TRUE)
avgintsteps
ggplot(avgintsteps,aes(interval, steps)+geom_line())
ggplot(avgintsteps,aes(x=interval,y=steps)+geom_line())
class(avgintsteps$steps)
ggplot(avgintsteps,aes(x=as.numeric(interval),y=steps)+geom_line())
avigntsteps$interval<-as.numeric(avigntsteps$interval)
avgintsteps$interval<-as.numeric(avgintsteps$interval)
ggplot(avgintsteps,aes(x=interval,y=steps)+geom_line())
ggplot(avgintsteps,aes(x=interval,y=steps))
ggplot(avgintsteps,aes(x=interval,y=steps)+geom_line())
plot(avgintsteps$interval , avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval , avgintsteps$steps)
xmin<-min(avgintsteps$interval)
xmin
xmax<-max(avgintsteps$interval)
xmax
avgintsteps$interval[1]
avgintsteps$interval[5]
plot(as.numeric(avgintsteps$interval) , avgintsteps$steps , ylab="Number of Steps", type = "n",xlim=cmin())
lines(avgintsteps$interval , avgintsteps$steps)
plot(as.numeric(avgintsteps$interval) , avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval , avgintsteps$steps)
lines(as.numeric(avgintsteps$interval) , avgintsteps$steps)
plot(avgintsteps$interval , avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(as.numeric(avgintsteps$interval) , avgintsteps$steps)
names(avgintsteps)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(as.numeric(avgintsteps$interval) , avgintsteps$steps)
avgintsteps$interval<-as.numeric(avgintsteps$interval)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(as.numeric(avgintsteps$interval) , avgintsteps$steps)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(as.numeric(avgintsteps$interval) , avgintsteps$steps)
avgintsteps$interval<-as.ts(avgintsteps$interval)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(as.numeric(avgintsteps$interval) , avgintsteps$steps)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(as.numeric(avgintsteps$interval) , avgintsteps$steps)
lines(avgintsteps$interval, avgintsteps$steps)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval, avgintsteps$steps)
avgintsteps$interval<-as.numeric(avgintsteps$interval)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval, avgintsteps$steps)
```
avgintsteps$interval
avgintsteps<-aggregate(steps~interval,activity,FUN=mean,na.rm=TRUE)
avgintsteps$interva
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval, avgintsteps$steps)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n",axes=FALSE)
lines(avgintsteps$interval, avgintsteps$steps)
axis(side=1,at=c(0,600,1200,1800,2400))
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval, avgintsteps$steps)
avgintsteps$interval
avgintsteps$interval<-as.numeric(avgintsteps$interval)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval, avgintsteps$steps)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval, avgintsteps$steps)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval, avgintsteps$steps)
avgintsteps$interval<-as.numeric(avgintsteps$interval)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n",axes=FALSE)
lines(avgintsteps$interval, avgintsteps$steps)
axis(side=1,at=c(0,600,1200,1800,2400))
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval, avgintsteps$steps)
avgintsteps$interval<-as.numeric(avgintsteps$interval)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval, avgintsteps$steps)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval, avgintsteps$steps)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(levels(avgintsteps$interval), avgintsteps$steps)
```
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval, avgintsteps$steps)
avgintsteps$interval
avgintsteps<-aggregate(steps~interval,activity,FUN=mean,na.rm=TRUE)
plot(x=avgintsteps$interval , y=avgintsteps$steps , ylab="Number of Steps", type = "n")
lines(avgintsteps$interval, avgintsteps$steps)
with(avgintsteps,interval[which.max(steps)])
install.packages("mice")
library(mice)
install.packages("impute")
-
source("https://bioconductor.org/biocLite.R")
biocLite()
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite("impute")
